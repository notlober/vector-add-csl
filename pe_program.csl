// Author: Selahattin Baki Damar

// Copyright 2024 Cerebras Systems.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

param memcpy_params: comptime_struct;

// vector dimensions
param N: i16;

// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// Vectors
var x: [N]f32;
var y: [N]f32;
var z: [N]f32;

// DSDs for accessing x, y, z
var x_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> x[i] });
var y_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> y[i] });
var z_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> z[i] });

// ptrs to x, y, z will be advertised as symbols to host
var x_ptr: [*]f32 = &x;
var y_ptr: [*]f32 = &y;
const z_ptr: [*]f32 = &z;

// Compute vector addition: z = x + y
fn add() void {
  @fadds(z_dsd, x_dsd, y_dsd);
}

// Call add function
fn compute() void {
  add();
  sys_mod.unblock_cmd_stream();
}

comptime {
  @export_symbol(x_ptr, "x");
  @export_symbol(y_ptr, "y");
  @export_symbol(z_ptr, "z");
  @export_symbol(compute);
}
